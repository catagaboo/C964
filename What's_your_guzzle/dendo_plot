#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri May 13 14:09:44 2022

@author: gabecata
"""
import numpy as np 
import pandas as pd
import nltk
import re
import matplotlib.pyplot as plt

#reads and loads the data
df = pd.read_csv('drink_type_with_alcohols.csv')
drink = df[ 'Drink'].values.astype("U")
alcoholNames = df['Main Alcohol'].values.astype("U")
drinkNames = df['Name'].values.astype("U")
flavor = df['Flavor'].values.astype("U")

#print(drinkNames[:10])

stopwords = nltk.corpus.stopwords.words('english')

from nltk.stem.snowball import SnowballStemmer
stemmer = SnowballStemmer("english")

def tokenize_only(text):
    # first tokenize by sentence, then by word to ensure that punctuation is caught as it's own token
    tokens = [word.lower() for sent in nltk.sent_tokenize(text) for word in nltk.word_tokenize(sent)]
    filtered_tokens = []
    # filter out any tokens not containing letters (e.g., numeric tokens, raw punctuation)
    for token in tokens:
        if re.search('[a-zA-Z]', token):
            filtered_tokens.append(token)
    return filtered_tokens

totalvocab_tokenized = []

for i in alcoholNames:
    allwords_tokenized = tokenize_only(i)
    totalvocab_tokenized.extend(allwords_tokenized)
    
vocab_frame = pd.DataFrame({'words': totalvocab_tokenized})
print(' there are ' + str(vocab_frame.shape[0]) + ' items in vocab_frame')

from sklearn.feature_extraction.text import TfidfVectorizer
#vectorizes the data
vectorizer = TfidfVectorizer(stop_words= 'english')
tfidf = vectorizer.fit_transform(drinkNames)
print(tfidf.shape)

terms = vectorizer.get_feature_names_out()

from sklearn.metrics.pairwise import cosine_similarity
dist = 1 - cosine_similarity(tfidf)


#Initialize the class object
from sklearn.cluster import KMeans
k=5
km = KMeans(n_clusters=k)
km.fit(tfidf)
clusters = km.labels_.tolist()

drinks = {'Drink': drink, 'Name': drinkNames, 'Main Alcohol': alcoholNames, 'cluster': clusters, 'Flavor': flavor}
frame = pd.DataFrame(drinks, index=[clusters], columns = ['Drink', 'Name', 'Flavor', 'cluster' ])

print(frame['cluster'].value_counts())

grouped = frame['Flavor'].groupby(frame['cluster'])
grouped.mean()


from scipy.cluster.hierarchy import ward, dendrogram

linkage_matrix = ward(dist) #define the linkage_matrix using ward clustering pre-computed distances

fig, ax = plt.subplots(figsize=(10, 20)) # set size
ax = dendrogram(linkage_matrix, orientation="left", labels=drinkNames);

plt.tick_params(\
    axis= 'x',          # changes apply to the x-axis
    which='both',      # both major and minor ticks are affected
    bottom='off',      # ticks along the bottom edge are off
    top='off',         # ticks along the top edge are off
    labelbottom='off')

plt.tight_layout() #show plot with tight layout

#uncomment below to save figure
plt.savefig('ward_clusters.png', dpi=200) #save figure as ward_clusters